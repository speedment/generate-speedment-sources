package com.speedment.sources.pattern;

import com.speedment.common.codegen.constant.DefaultAnnotationUsage;
import com.speedment.common.codegen.constant.DefaultJavadocTag;
import com.speedment.common.codegen.constant.SimpleParameterizedType;
import com.speedment.common.codegen.constant.SimpleType;
import com.speedment.common.codegen.model.ClassOrInterface;
import com.speedment.common.codegen.model.Constructor;
import com.speedment.common.codegen.model.Field;
import com.speedment.common.codegen.model.File;
import com.speedment.common.codegen.model.Generic;
import com.speedment.common.codegen.model.Import;
import com.speedment.common.codegen.model.Javadoc;
import com.speedment.common.codegen.model.Method;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.field.ReferenceField;
import com.speedment.runtime.field.comparator.NullOrder;
import com.speedment.runtime.field.comparator.ReferenceFieldComparator;
import com.speedment.runtime.field.internal.ReferenceFieldImpl;
import com.speedment.runtime.field.internal.comparator.ReferenceFieldComparatorImpl;
import com.speedment.runtime.field.internal.method.GetReferenceImpl;
import com.speedment.runtime.field.internal.predicate.reference.ReferenceEqualPredicate;
import com.speedment.runtime.field.internal.util.Cast;
import com.speedment.runtime.field.method.ReferenceGetter;
import com.speedment.runtime.field.method.ReferenceSetter;
import com.speedment.runtime.field.predicate.FieldPredicate;
import com.speedment.runtime.field.predicate.Inclusion;
import com.speedment.runtime.field.predicate.SpeedmentPredicate;
import com.speedment.runtime.typemapper.TypeMapper;

import java.lang.reflect.Type;
import java.util.Collection;
import java.util.Objects;

import static com.speedment.common.codegen.constant.DefaultType.genericType;

/**
 *
 * @author Emil Forslund
 */
public final class FieldImplPattern extends AbstractSiblingPattern {

    public FieldImplPattern(Class<?> wrapper, Class<?> primitive) {
        super(wrapper, primitive);
    }

    @Override
    protected Class<?> getSiblingClass() {
        return ReferenceFieldImpl.class;
    }

    @Override
    public String getClassName() {
        return ucPrimitive() + "FieldImpl";
    }

    @Override
    public ClassOrInterface<?> make(File file) {
        file.add(Import.of(Objects.class).static_().setStaticMember("requireNonNull"));
        file.add(Import.of(siblingOf(GetReferenceImpl.class, "Get%1$sImpl")));
        
        final Type fieldType = SimpleParameterizedType.create(
            siblingOf(ReferenceField.class, "%1$sField"),
            SimpleType.create("ENTITY"),
            SimpleType.create("D")
        );
        
        final Type identifierType = SimpleParameterizedType.create(ColumnIdentifier.class,
            SimpleType.create("ENTITY")
        );
        
        final Type getterType = SimpleParameterizedType.create(
            siblingOf(ReferenceGetter.class, "%1$sGetter"),
            SimpleType.create("ENTITY")
        );
        
        final Type getType = SimpleParameterizedType.create(
            siblingOf(ReferenceGetter.class, "Get%1$s"),
            SimpleType.create("ENTITY"),
            SimpleType.create("D")
        );
        
        final Type setterType = SimpleParameterizedType.create(
            siblingOf(ReferenceSetter.class, "%1$sSetter"),
            SimpleType.create("ENTITY")
        );
        
        final Type typeMapperType = SimpleParameterizedType.create(
            TypeMapper.class,
            SimpleType.create("D"),
            wrapperType()
        );
        
        final Type comparatorType = SimpleParameterizedType.create(
            siblingOf(ReferenceFieldComparator.class, "%1$sFieldComparator"),
            SimpleType.create("ENTITY"),
            SimpleType.create("D")
        );
       
        return com.speedment.common.codegen.model.Class.of(getClassName())

            ////////////////////////////////////////////////////////////////////
            //                            Javadoc                             //
            ////////////////////////////////////////////////////////////////////
            .set(Javadoc.of(
                formatJavadoc("Default implementation of the {@link " + ucPrimitive() + "Field}-interface.") +
                    "\n\nGenerated by " + getClass().getName()
                )
                .add(DefaultJavadocTag.PARAM.setValue("<ENTITY>").setText("entity type"))
                .add(DefaultJavadocTag.PARAM.setValue("<D>").setText("database type"))
                .add(DefaultJavadocTag.AUTHOR.setValue("Emil Forslund"))
                .add(DefaultJavadocTag.SINCE.setValue("3.0.0"))
            )

            ////////////////////////////////////////////////////////////////////
            //                        Class Declaration                       //
            ////////////////////////////////////////////////////////////////////
            .public_().final_()
            .add(generatedAnnotation())
            .add(fieldType)
            .add(Generic.of(SimpleType.create("ENTITY")))
            .add(Generic.of(SimpleType.create("D")))

            ////////////////////////////////////////////////////////////////////
            //                             Fields                             //
            ////////////////////////////////////////////////////////////////////
            .add(Field.of("identifier", identifierType).private_().final_())
            .add(Field.of("getter", getType).private_().final_())
            .add(Field.of("setter", setterType).private_().final_())
            .add(Field.of("typeMapper", typeMapperType).private_().final_())
            .add(Field.of("unique", boolean.class).private_().final_())
            .add(Field.of("tableAlias", String.class).private_().final_())

            ////////////////////////////////////////////////////////////////////
            //                          Constructor                           //
            ////////////////////////////////////////////////////////////////////
            .add(Constructor.of().public_()
                .add(Field.of("identifier", identifierType))
                .add(Field.of("getter", getterType))
                .add(Field.of("setter", setterType))
                .add(Field.of("typeMapper", typeMapperType))
                .add(Field.of("unique", boolean.class))
                .add(
                    "this.identifier = requireNonNull(identifier);",
                    "this.getter     = new Get" + ucPrimitive() + "Impl<>(this, getter);",
                    "this.setter     = requireNonNull(setter);",
                    "this.typeMapper = requireNonNull(typeMapper);",
                    "this.unique     = unique;",
                    "this.tableAlias = identifier.getTableId();"
                )
            )
            .add(Constructor.of().private_()
                .add(Field.of("identifier", identifierType))
                .add(Field.of("getter", getterType))
                .add(Field.of("setter", setterType))
                .add(Field.of("typeMapper", typeMapperType))
                .add(Field.of("unique", boolean.class))
                .add(Field.of("tableAlias", String.class))
                .add(
                    "this.identifier = requireNonNull(identifier);",
                    "this.getter     = new Get" + ucPrimitive() + "Impl<>(this, getter);",
                    "this.setter     = requireNonNull(setter);",
                    "this.typeMapper = requireNonNull(typeMapper);",
                    "this.unique     = unique;",
                    "this.tableAlias = requireNonNull(tableAlias);"
                )
            )

            ////////////////////////////////////////////////////////////////////
            //                            Getters                             //
            ////////////////////////////////////////////////////////////////////
            .add(Method.of("identifier", identifierType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return identifier;")
            )
            
            .add(Method.of("setter", setterType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return setter;")
            )
            
            .add(Method.of("getter", getType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return getter;")
            )
            
            .add(Method.of("typeMapper", typeMapperType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return typeMapper;")
            )
            
            .add(Method.of("isUnique", boolean.class).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return unique;")
            )

            .add(Method.of("tableAlias", String.class).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return tableAlias;")
            )

            .add(Method.of("getField", genericType(siblingOf(ReferenceField.class, "%1$sField"), "ENTITY", "D"))
                .public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return this;")
            )

            ////////////////////////////////////////////////////////////////////
            //                            Creators                            //
            ////////////////////////////////////////////////////////////////////
            .add(Method.of("tableAlias", fieldType).public_()
                .add(Field.of("tableAlias", String.class))
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add(
                    "requireNonNull(tableAlias);",
                    "return new "+getClassName()+"<>(identifier, getter, setter, typeMapper, unique, tableAlias);"
                )
            )

            ////////////////////////////////////////////////////////////////////
            //                          Comparators                           //
            ////////////////////////////////////////////////////////////////////
            .call(c -> file.add(Import.of(siblingOf(
                ReferenceFieldComparatorImpl.class, "%1$sFieldComparatorImpl"))))
            
            .add(Method.of("comparator", comparatorType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return new " + ucPrimitive() + "FieldComparatorImpl<>(this);")
            )

            .add(Method.of("reversed", comparatorType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return comparator().reversed();")
            )
            
            .add(Method.of("comparatorNullFieldsFirst", comparatorType).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return comparator();")
            )

            .add(Method.of("getNullOrder", NullOrder.class).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return NullOrder.LAST;")
            )

            .add(Method.of("isReversed", boolean.class).public_()
                .add(DefaultAnnotationUsage.OVERRIDE)
                .add("return false;")
            )

            ////////////////////////////////////////////////////////////////////
            //                           Operators                            //
            ////////////////////////////////////////////////////////////////////
            .add(newUnaryOperator(  file, "equal",          "Equal",          false))
            .add(newUnaryOperator(  file, "greaterThan",    "GreaterThan",    false))
            .add(newUnaryOperator(  file, "greaterOrEqual", "GreaterOrEqual", false))
            .add(newBetweenOperator(file, "between",                          false))
            .add(newInOperator(     file, "in",                               false))
            .add(newUnaryOperator(  file, "notEqual",       "NotEqual",       true))
            .add(newUnaryOperator(  file, "lessOrEqual",    "LessOrEqual",    true))
            .add(newUnaryOperator(  file, "lessThan",       "LessThan",       true))
            .add(newBetweenOperator(file, "notBetween",                       true))
            .add(newInOperator(     file, "notIn",                            true))
        ;
    }
    
    private Method newUnaryOperator(File file, String methodName, String predicateName, boolean negated) {
        file.add(Import.of(cousinOf(ReferenceEqualPredicate.class, primitive() + "s", "%1$s" + predicateName + "Predicate")));
        
        final Type predicateType = SimpleParameterizedType.create(
            negated ? SpeedmentPredicate.class : FieldPredicate.class,
            SimpleType.create("ENTITY")
        );
        
        return Method.of(methodName, predicateType)
            .public_()
            .add(DefaultAnnotationUsage.OVERRIDE)
            .add(Field.of("value", wrapperType()))
            .add("return new " + ucPrimitive() + predicateName + "Predicate<>(this, value);");
    }
    
    private Method newInOperator(File file, String methodName, boolean negated) {
        file.add(Import.of(cousinOf(ReferenceEqualPredicate.class, primitive() + "s", "%1$s" + (negated ? "Not" : "") + "InPredicate")));
        file.add(Import.of(siblingOf(Cast.class, "CollectionUtil")).static_().setStaticMember("collectionToSet"));
        
        final Type predicateType = SimpleParameterizedType.create(
            negated ? SpeedmentPredicate.class : FieldPredicate.class,
            SimpleType.create("ENTITY")
        );
        
        return Method.of(methodName, predicateType)
            .public_()
            .add(DefaultAnnotationUsage.OVERRIDE)
            .add(Field.of("values", SimpleParameterizedType.create(
                Collection.class,
                wrapperType()
            )))
            .add("return new " + ucPrimitive() + (negated ? "Not" : "") + "InPredicate<>(this, collectionToSet(values));");
    }
    
    private Method newBetweenOperator(File file, String methodName, boolean negated) {
        file.add(Import.of(cousinOf(ReferenceEqualPredicate.class, primitive() + "s", "%1$s" + (negated ? "Not" : "") + "BetweenPredicate")));
        
        final Type predicateType = SimpleParameterizedType.create(
            negated ? SpeedmentPredicate.class : FieldPredicate.class,
            SimpleType.create("ENTITY")
        );
        
        return Method.of(methodName, predicateType)
            .public_()
            .add(DefaultAnnotationUsage.OVERRIDE)
            .add(Field.of("start", wrapperType()))
            .add(Field.of("end", wrapperType()))
            .add(Field.of("inclusion", Inclusion.class))
            .add("return new " + ucPrimitive() + (negated ? "Not" : "") + "BetweenPredicate<>(this, start, end, inclusion);");
    }
}